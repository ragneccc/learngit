HEAD指向的版本就是当前版本，因此，Git允许我们在版本的历史之间穿梭，使用命令git reset --hard commit_id。

穿梭前，用git log可以查看提交历史，以便确定要回退到哪个版本。

要重返未来，用git reflog查看命令历史，以便确定要回到未来的哪个版本。



第一步是用git add把文件添加进去，实际上就是把文件修改添加到暂存区；

第二步是用git commit提交更改，实际上就是把暂存区的所有内容提交到当前分支。



命令git checkout -- readme.txt意思就是，把readme.txt文件在工作区的修改全部撤销，这里有两种情况：

一种是readme.txt自修改后还没有被放到暂存区，现在，撤销修改就回到和版本库一模一样的状态；

一种是readme.txt已经添加到暂存区后，又作了修改，现在，撤销修改就回到添加到暂存区后的状态。

总之，就是让这个文件回到最近一次git commit或git add时的状态。




git init
git add (文件名)
git commit -m"版本描述"
git log 查看版本
git reset --hard HEAD(+n个'^'符号，返回n个版本以前)
git status 查询看 暂存区
cat			查看
git diff HEAD -- readme.txt命令可以查看工作区和版本库里面最新版本的区别


撤销修改
git checkout -- readme.txt	(撤销到版本库一致，或者，撤回到和暂存区一致)
git reset HEAD readme.txt  把暂存区的修改撤销掉（unstage），重新放回工作区

删除操作
rm
git rm
删除后
git commit -m"delete done"



添加远程库
第一次添加的初始化
	1需要咋本机（通常为windows）上申请密匙将公匙上传到github网站
	
	2在本地仓库的工作空间右键进入git Bush输入如下（// //内替换为网站上的仓库地址）
	git remote add origin //git@github.com:michaelliao/learngit.git//  
	3将master分支推送到服务端并且简历里联系
	git push -u origin master
之后每次操作同步只需要输入
	git push origin master
	
	小结

要关联一个远程库，使用命令git remote add origin git@server-name:path/repo-name.git；

关联后，使用命令git push -u origin master第一次推送master分支的所有内容；

此后，每次本地提交后，只要有必要，就可以使用命令git push origin master推送最新修改；

分布式版本系统的最大好处之一是在本地工作完全不需要考虑远程库的存在，
也就是有没有联网都可以正常工作，而SVN在没有联网的时候是拒绝干活的！
当有网络的时候，再把本地提交推送一下就完成了同步，真是太方便了


从远程库克隆
git clone git@github.com:ragneccc/gitskills.git
小结

要克隆一个仓库，首先必须知道仓库的地址，然后使用git clone命令克隆。

Git支持多种协议，包括https，但通过ssh支持的原生git协议速度最快。


分支管理：：：：
git checkout -b dev创建并切换到dev分支
	相当于以下两条命令
			git branch dev
			git checkout dev
git branch 可以查看当前分支
$ git checkout master切换到当前分支
git merge dev 将分支合并到当前分支

				小结

				Git鼓励大量使用分支：

				查看分支：git branch

				创建分支：git branch <name>

				切换分支：git checkout <name>

				创建+切换分支：git checkout -b <name>

				合并某分支到当前分支：git merge <name>

				删除分支：git branch -d <name>
				
				
分支冲突解决

查看分支图效果显示
git log --graph --pretty=oneline --abbrev-commit

当Git无法自动合并分支时，就必须首先解决冲突。解决冲突后，再提交，合并完成。

用git log --graph命令可以看到分支合并图。
https://www.liaoxuefeng.com/wiki/0013739516305929606dd18361248578c67b8067c8c017b000/001375840202368c74be33fbd884e71b570f2cc3c0d1dcf000


分支管理策略
创建分支 git checkout -b dev
 
带有历史几轮的分支 --no--ff 参数 
git merge --no-ff -m "merge with no-ff" dev
git log --graph --pretty=oneline --abbrev-commit
				*   7825a50 merge with no-ff
				|\
				| * 6224937 add merge
				|/
				*   59bc1cb conflict fixed
				...
	小结

Git分支十分强大，在团队开发中应该充分应用。

合并分支时，加上--no-ff参数就可以用普通模式合并，合并后的历史有分支，能看出来曾经做过合并，而fast forward合并就看不出来曾经做过合并。


BUG处理分支
git stash 将当前的分支任务挂起
	git stash list
	git stash apply 恢复后 stash内容不删除
	git stash drop 来删除 stash 内容
	git stash pop 恢复 同时把 stash 内容删除
bug修复流程
	1 切换到bug分支
	git checkout master
	2 创建临时分支
	git checkout -b issue-101
	3 修复bug
	。。。
	4 切换到bug分支,并合并分支
	git checkout master
	git merge --no-ff -m "merged bug fix 101" issue-101
	5 删除 临时bug处理分支
	git checkout -d issue-101
	
Feature分支
添加一个新功能时，不希望因实验性质的代码，把主分支搞乱了，每添加一个新功能
最好新建一个feature分支，在上面开发，完成后，合并，最后，删除该feature分支。
	使用类似bug分支
销毁失败。Git友情提醒，feature-vulcan分支还没有被合并，如果删除，将丢失掉修改，
如果要强行删除，需要使用命令
	git branch -D feature-vulcan（强行删除还没有合并的分支-D）

多人协作
git remote 查看远程库的信息
git remote -v 显示更详细的信息
	推送分支
	git push origin master
	git push origin dev
	是把该分支上的所有本地提交推送到远程库。推送时，要指定本地分支，这样，
	Git就会把该分支推送到远程库对应的远程分支上
	master分支是主分支，因此要时刻与远程同步；
	dev分支是开发分支，团队所有成员都需要在上面工作，
								所以也需要与远程同步；
	##多人协作时，大家都会往master和dev分支上推送各自的修改

		因此，多人协作的工作模式通常是这样：

	*首先，可以试图用git push origin branch-name推送自己的修改；

	*如果推送失败，则因为远程分支比你的本地更新，需要先用git pull试图合并；

	*如果合并有冲突，则解决冲突，并在本地提交；

	*没有冲突或者解决掉冲突后，再用git push origin branch-name推送就能成功！

	*如果git pull提示“no tracking information”，则说明本地分支和远程分支的链接关系没有创建，用命令git branch --set-upstream branch-name origin/branch-name。

	*这就是多人协作的工作模式，一旦熟悉了，就非常简单。

	小结

	查看远程库信息，使用git remote -v；

	本地新建的分支如果不推送到远程，对其他人就是不可见的；

	从本地推送分支，使用git push origin branch-name，如果推送失败，先用git pull抓取远程的新提交；

	在本地创建和远程分支对应的分支，使用git checkout -b branch-name origin/branch-name，本地和远程分支的名称最好一致；

	建立本地分支和远程分支的关联，使用git branch --set-upstream branch-name origin/branch-name；

	从远程抓取分支，使用git pull，如果有冲突，要先处理冲突

创建标签
	1 切换到需要大啊标签的分支
	git brnch 查看分支 
	git breakout master 
	2 创建标签
	git tag <name>
	3 查看标签
	git tag
	4 查看标签内容
	git show <tagname>
	5 可以创建带有说明的标签，用-a指定标签名，-m指定说明文字
	git tag -a v0.1 -m "version 0.1 released" 3628164
	6 可以通过-s用私钥签名一个标签
		GP签名的标签是不可伪造的，因为可以验证PGP签名
		
	小结

命令git tag <name>用于新建一个标签，默认为HEAD，也可以指定一个commit id；

git tag -a <tagname> -m "blablabla..."可以指定标签信息；

git tag -s <tagname> -m "blablabla..."可以用PGP签名标签；

命令git tag可以查看所有标签。


操作标签
	删除标签
	git tag -d v0.1
	创建的标签都只存在本地，推送某个标签到远程
	git push origin <tagname>
	一次性推送全部尚未推送到远程的本地标签
	git push origin --tags
	删除远程标签
		git tag -d v0.9
		git push origin :refs/tags/v0.9

	小结

命令git push origin <tagname>可以推送一个本地标签；

命令git push origin --tags可以推送全部未推送过的本地标签；

命令git tag -d <tagname>可以删除一个本地标签；

命令git push origin :refs/tags/<tagname>可以删除一个远程标签


添加多个远程库

先删除已关联的名为origin的远程库
git remote rm origin
然后，先关联GitHub的远程库
git remote add github git@github.com:michaelliao/learngit.git
接着，再关联码云的远程库
git remote add gitee git@gitee.com:liaoxuefeng/learngit.git

用git remote -v查看远程库信息，可以看到两个远程库：

git remote -v
gitee    git@gitee.com:liaoxuefeng/learngit.git (fetch)
gitee    git@gitee.com:liaoxuefeng/learngit.git (push)
github    git@github.com:michaelliao/learngit.git (fetch)
github    git@github.com:michaelliao/learngit.git (push)


如果要推送到GitHub，使用命令：

git push github master
如果要推送到码云，使用命令：

git push gitee master


自定义git
	Git工作区的根目录下创建一个特殊的.gitignore文件，然后把要
	忽略的文件名填进去，Git就会自动忽略这些文件。
 忽略文件的原则是：
		*忽略操作系统自动生成的文件，比如缩略图等；
		*忽略编译生成的中间文件、可执行文件等，也就是如果一个文件是通过
			另一个文件自动生成的，那自动生成的文件就没必要放进版本库，
			比如Java编译产生的.class文件；
		*忽略你自己的带有敏感信息的配置文件，比如存放口令的配置文件。
	有些时候，你想添加一个文件到Git，但发现添加不了，原因是这个文件被.gitignore忽略了
		如果你确实想添加该文件，可以用-f强制添加到Git：
		$ git add -f App.class
	或者你发现，可能是.gitignore写得有问题，需要找出来到底哪个规则写错了，
		可以用git check-ignore命令检查：
		$ git check-ignore -v App.clas
	小结

忽略某些文件时，需要编写.gitignore；
.gitignore文件本身要放到版本库里，并且可以对.gitignore做版本管理！


配置别名
	用st代替status
	git config --global alias.st status
	配置Git的时候，加上--global是针对当前用户起作用的，如果不加，
		那只针对当前的仓库起作用。
	配置文件放哪了？每个仓库的Git配置文件都放在.git/config文件中：
		别名就在[alias]后面，要删除别名，直接把对应的行删掉即可
